#compdef se

local curcontext="$curcontext" state line _gems _opts ret=1

_arguments -C -A "-v" -A "--version" \
	'(- 1 *)'{-v,--version}'[display version information]' \
	'1: :->cmds' \
	'*:: :->args' && ret=0

case $state in
	cmds)
		_values "se command" \
			"british2american[Try to convert British quote style to American quote style]" \
			"build[Build an ebook from a Standard Ebook source directory]" \
			"build-images[Build ebook cover and titlepage images in a Standard Ebook source directory]" \
			"clean[Prettify and canonicalize individual XHTML or SVG files]" \
			"compare-versions[Render and compare XHTML files in an ebook repository]" \
			"create-draft[Create a skeleton of a new Standard Ebook]" \
			"dec2roman[Convert a decimal number to a Roman numeral]" \
			"extract-ebook[Extract an EPUB, MOBI, or AZW3 ebook]" \
			"find-mismatched-diacritics[Find words with mismatched diacritics in Standard Ebook source directories]" \
			"help[List available SE commands]" \
			"hyphenate[Insert soft hyphens at syllable breaks in an XHTML file]" \
			"interactive-sr[Use Vim to perform an interactive search and replace on a list of files]" \
			"lint[Check for various Standard Ebooks style errors]" \
			"make-url-safe[Make a string URL-safe]" \
			"modernize-spelling[Modernize spelling of some archaic words, and replace words that may be archaically compounded with a dash to a more modern spelling]" \
			"prepare-release[Calculate work word count, insert release date if not yet set, and update modified date and revision number]" \
			"print-manifest-and-spine[Print <manifest> and <spine> tags to standard output for the given Standard Ebooks source directory]" \
			"reading-ease[Calculate the Flesch reading ease for a Standard Ebooks source directory]" \
			"recompose-epub[Recompose a Standard Ebooks source directory into a single HTML5 file, and print to standard output]" \
			"reorder-endnotes[Increment the specified endnote and all following endnotes by 1]" \
			"roman2dec[Convert a Roman numeral to a decimal number]" \
			"semanticate[Apply some scriptable semantics rules from the Standard Ebooks semantics manual]" \
			"split-file[Split an XHTML file into many files]" \
			"titlecase[Convert a string to titlecase]" \
			"typogrify[Apply some scriptable typography rules from the Standard Ebooks typography manual to a Standard Ebook source directory]" \
			"unicode-names[Display Unicode code points, descriptions, and links to more details for each character in a string]" \
			"version[Print the version number and exit]" \
			"word-count[Count the number of words in an HTML file and optionally categorize by length]"
		ret=0
		;;
	args)
		case $line[1] in
			british2american)
				_arguments \
					'(-f --force)'{-f,--force}'[force conversion of quote style]' \
					'(-v --verbose)'{-v,--verbose}'[increase output verbosity]'
				ret=0
				;;
			build)
				_arguments \
					'(-b --kobo)'{-b,--kobo}'[also build a .kepub.epub file for Kobo]' \
					'(-c --check)'{-c,--check}'[use epubcheck to validate the compatible .epub file; if --kindle is also specified and epubcheck fails, don’t create a Kindle file]' \
					'(-k --kindle)'{-k,--kindle}'[also build an .azw3 file for Kindle]' \
					'(-o --output-dir)'{-o,--output-dir}'=[a directory to place output files in; will be created if it doesn’t exist]: :_directories' \
					'(-p --proof)'{-p,--proof}'[insert additional CSS rules that are helpful for proofreading; output filenames will end in .proof]' \
					'(-t --covers)'{-t,--covers}'[output the cover and a cover thumbnail]' \
					'(-v --verbose)'{-v,--verbose}'[increase output verbosity]' \
					'*: :_directories'
				ret=0
				;;
			build-images)
				_arguments \
					'(-v --verbose)'{-v,--verbose}'[increase output verbosity]' \
					'*: :_directories'
				ret=0
				;;
			help)
				ret=0
				;;
			version)
				ret=0
				;;
			# *)
			# 	_opts=(  $(se help $line[1] | sed -e '/^  \[-/!d; s/^  \[\(-[^=]*\)=.*/\1/') )
			# 	_opts+=( $(se help $line[1] | sed -e '/^  -/!d; s/^  \(-.\), \[\(-[^=]*\)=.*/\1 \2/') )
			# 	if [[ $_opts != "" ]]; then
			# 		_values 'options' $_opts && ret=0
			# 	fi
			# 	;;
		esac
		;;
esac

return ret
